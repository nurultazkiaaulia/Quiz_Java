/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pengelolaanbuku2;

import java.sql.*;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.*;

/**
 *
 * @author ASUS
 */
public class interfacebuku extends javax.swing.JFrame {

    /**
     * Creates new form interfacebuku extends javax.swing.JFrame {
     */
    
    Connection koneksi = pengelolaanbuku2.koneksi.getKoneksi(); //utk koneksi ke database
    Statement tokobuku; //kirim query sql ke database
    ResultSet databuku; //menampilkan hasil dari query diatas
    Boolean ketemu = false;
    
    public interfacebuku() {
        initComponents();
    }
    
    private void kosong() {
        inputjudul.setText("");
        inputpenulis.setText("");
        inputharga.setText("");
        inputstok.setText("");

        btntambah.setText("Simpan");
//        btnEdit.setEnabled(false);
    }

      public void Tampilkanbuku() {
        try {
            tokobuku = koneksi.createStatement();
            databuku = tokobuku.executeQuery("SELECT * FROM data_buku");

            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Judul");
            model.addColumn("Penulis");
            model.addColumn("Harga");
            model.addColumn("Stok");

            model.getDataVector().removeAllElements();
            model.fireTableDataChanged();
            model.setRowCount(0);

            while (databuku.next()) {
                Object[] data = {
                    databuku.getString("judul"),
                    databuku.getString("penulis"),
                    databuku.getString("harga"),
                    databuku.getString("stok"),
                };
                model.addRow(data);
                tbldata.setModel(model);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Ada Kesalahan " + e.getMessage());
        }
    }

    private void Caribuku() {
        try {
                       tokobuku = koneksi.createStatement();
            databuku = tokobuku.executeQuery("SELECT * FROM data_buku WHERE judul LIKE '%" + txtcari.getText() + "% '||"
                    + "penulis LIKE '%" + txtcari.getText() + "%' ||  "
                    + "harga LIKE '%" + txtcari.getText() + "%' || "
                    + "stok LIKE '%" + txtcari.getText() + "%'");

            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Judul");
            model.addColumn("Penulis");
            model.addColumn("Harga");
            model.addColumn("Stok");

            model.getDataVector().removeAllElements();
            model.fireTableDataChanged();
            model.setRowCount(0);

            while (databuku.next()) {
                Object[] data = {
                    databuku.getString("judul"),
                    databuku.getString("penulis"),
                    databuku.getString("harga"),
                    databuku.getString("stok"),
                };
                model.addRow(data);
                tbldata.setModel(model);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Ada Kesalahan " + e.getMessage());
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbldata = new javax.swing.JTable();
        judul_ = new javax.swing.JLabel();
        penulis_ = new javax.swing.JLabel();
        harga_ = new javax.swing.JLabel();
        stok_ = new javax.swing.JLabel();
        inputpenulis = new javax.swing.JTextField();
        inputharga = new javax.swing.JTextField();
        inputstok = new javax.swing.JTextField();
        inputjudul = new javax.swing.JTextField();
        btntambah = new javax.swing.JButton();
        txtcari = new javax.swing.JTextField();
        btnhapus = new javax.swing.JButton();
        btnbatal = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
                formAncestorMoved(evt);
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 24)); // NOI18N
        jLabel1.setText("DAFTAR BUKU");
        jLabel1.setMaximumSize(new java.awt.Dimension(90, 35));

        tbldata.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Judul", "Penulis", "Harga", "Stok"
            }
        ));
        tbldata.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbldataMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbldata);

        judul_.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        judul_.setText("Judul");

        penulis_.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        penulis_.setText("Penulis");

        harga_.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        harga_.setText("Harga");

        stok_.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        stok_.setText("Stok");

        inputpenulis.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        inputpenulis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputpenulisActionPerformed(evt);
            }
        });

        inputharga.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        inputharga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputhargaActionPerformed(evt);
            }
        });

        inputstok.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        inputstok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputstokActionPerformed(evt);
            }
        });

        inputjudul.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        inputjudul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputjudulActionPerformed(evt);
            }
        });

        btntambah.setBackground(new java.awt.Color(255, 255, 255));
        btntambah.setText("Tambah");
        btntambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btntambahActionPerformed(evt);
            }
        });

        txtcari.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        txtcari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtcariActionPerformed(evt);
            }
        });
        txtcari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtcariKeyPressed(evt);
            }
        });

        btnhapus.setBackground(new java.awt.Color(255, 255, 255));
        btnhapus.setText("Hapus");
        btnhapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnhapusActionPerformed(evt);
            }
        });

        btnbatal.setBackground(new java.awt.Color(255, 255, 255));
        btnbatal.setText("Batal");
        btnbatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbatalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnbatal)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(penulis_)
                                        .addComponent(judul_)
                                        .addComponent(harga_)
                                        .addComponent(stok_))
                                    .addGap(44, 44, 44)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(inputjudul, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                                        .addComponent(inputpenulis)
                                        .addComponent(inputharga)
                                        .addComponent(inputstok)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btntambah)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtcari, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(btnhapus))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(214, 214, 214))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputjudul, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(judul_))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputpenulis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(penulis_))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputharga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(harga_))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputstok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stok_))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btntambah)
                    .addComponent(btnbatal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtcari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnhapus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(126, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btntambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btntambahActionPerformed
        // TODO add your handling code here:
        try {
            // simpan data
            tokobuku = koneksi.createStatement();
            if (inputjudul.getText().equals("")
                || inputpenulis.getText().equals("")
                || inputharga.getText().equals("")
                || inputstok.getText().equals("")
                ) {
                JOptionPane.showMessageDialog(null, "Data Tidak Boleh Kosong", "Validasi data", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            
            
            if ("Tambah".equals(btntambah.getText())) {
                String cek = "SELECT * FROM data_buku WHERE judul = '" + inputjudul.getText() + "'";
                databuku = tokobuku.executeQuery(cek);
                if (databuku.next()) {
                    JOptionPane.showMessageDialog(null, "Upss.... ID ini Sudah Terdaftar");
                } else {
                    String judul = inputjudul.getText();
                    String penulis = inputpenulis.getText();
                    double harga = Double.parseDouble(inputharga.getText());
                    int stok = Integer.parseInt(inputstok.getText());

                    String sql = "INSERT INTO data_buku (judul, penulis, harga, stok) VALUES ('"
                        + judul + "', '"
                        + penulis + "', "
                        + harga + ", "
                        + stok + ")";
                    tokobuku.executeUpdate(sql);
                    JOptionPane.showMessageDialog(null, "Simpan Data Berhasil");
                    kosong();
                    Tampilkanbuku();
                }
            } else {
                //aksi ubah data
                String judul = inputjudul.getText();
                String penulis = inputpenulis.getText();
                double harga = Double.parseDouble(inputharga.getText());
                int stok = Integer.parseInt(inputstok.getText());
                    
               String sql = "UPDATE data_buku SET penulis = '" + penulis + "', harga = "
                + harga + ", stok = "
                + stok + " WHERE judul = '"
                + judul + "'";

                // Eksekusi query
                int rowsUpdated = tokobuku.executeUpdate(sql);
                if (rowsUpdated > 0) {
                    JOptionPane.showMessageDialog(null, "Edit Data Berhasil");
                } else {
                    JOptionPane.showMessageDialog(null, "Judul Buku tidak ditemukan", "Error", JOptionPane.ERROR_MESSAGE);
                }
                

                kosong();
                Tampilkanbuku();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Tambah Buku Gagal " + e.getMessage());
        }
    }//GEN-LAST:event_btntambahActionPerformed

    private void btnhapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnhapusActionPerformed
        // TODO add your handling code here:
                 if (inputjudul.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Silahkan pilih buku yang akan di hapus");
        } else {
            int jawab = JOptionPane.showConfirmDialog(null, "Buku Ini akan dihapus, lanjutkan?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
            if (jawab == 0) {
                try {
                    tokobuku = koneksi.createStatement();
                    String sql = "DELETE FROM data_buku WHERE judul = '" + inputjudul.getText() + "'";
                    tokobuku.executeUpdate(sql);

                    JOptionPane.showMessageDialog(null, "Data Berhasil Dihapus");
                    kosong();
                    Tampilkanbuku();

                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "Buku Tidak Dapat Dihapus" + e.getMessage());
                }
            }
        }     
    }//GEN-LAST:event_btnhapusActionPerformed

    private void txtcariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtcariActionPerformed
        // TODO add your handling code here:
        kosong();
    }//GEN-LAST:event_txtcariActionPerformed

    private void btnbatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbatalActionPerformed
        // TODO add your handling code here:
        kosong();
    }//GEN-LAST:event_btnbatalActionPerformed

    private void tbldataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbldataMouseClicked
        // TODO add your handling code here:
        inputjudul.setText(tbldata.getValueAt(tbldata.getSelectedRow(), 0).toString());
        inputpenulis.setText(tbldata.getValueAt(tbldata.getSelectedRow(), 1).toString());
        inputharga.setText(tbldata.getValueAt(tbldata.getSelectedRow(), 2).toString());
        inputstok.setText(tbldata.getValueAt(tbldata.getSelectedRow(), 3).toString());

        btntambah.setText("Edit");
    }//GEN-LAST:event_tbldataMouseClicked

    private void txtcariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcariKeyPressed
        // TODO add your handling code here:
        Caribuku();
    }//GEN-LAST:event_txtcariKeyPressed

    private void formAncestorMoved(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formAncestorMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_formAncestorMoved

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        Tampilkanbuku();
    }//GEN-LAST:event_formWindowOpened

    private void inputjudulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputjudulActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputjudulActionPerformed

    private void inputpenulisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputpenulisActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputpenulisActionPerformed

    private void inputhargaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputhargaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputhargaActionPerformed

    private void inputstokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputstokActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputstokActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
         try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(interfacebuku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(interfacebuku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(interfacebuku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(interfacebuku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(interfacebuku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new interfacebuku().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnbatal;
    private javax.swing.JButton btnhapus;
    private javax.swing.JButton btntambah;
    private javax.swing.JLabel harga_;
    private javax.swing.JTextField inputharga;
    private javax.swing.JTextField inputjudul;
    private javax.swing.JTextField inputpenulis;
    private javax.swing.JTextField inputstok;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel judul_;
    private javax.swing.JLabel penulis_;
    private javax.swing.JLabel stok_;
    private javax.swing.JTable tbldata;
    private javax.swing.JTextField txtcari;
    // End of variables declaration//GEN-END:variables
}
